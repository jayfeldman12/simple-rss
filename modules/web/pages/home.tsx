import type {NextPage} from 'next';
import Head from 'next/head';
import {useEffect, useState} from 'react';
import Spinner from 'react-bootstrap/Spinner';
import Card from 'react-bootstrap/Card';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';
import {FaExternalLinkAlt} from 'react-icons/fa';
import {useFeeds} from './useFeeds';

const Home: NextPage = () => {
  const {
    errorMessage,
    isFetching,
    items,
    markAllRead,
    onItemClick,
    setFetchAll,
    setPauseQueries,
    setUsername,
    showFetchAll,
    showMarkAllRead,
    unreadCount,
  } = useFeeds();
  const [windowHeight, setWindowHeight] = useState<number | string>('100rem');

  useEffect(() => {
    if (typeof window !== 'undefined') setWindowHeight(window.innerHeight);
  }, []);

  return (
    <div>
      <Head>
        <title>{`${unreadCount ? `(${unreadCount}) ` : ''}Simple Rss`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div
          className={`container-fluid text-center py-5 px-5 bg-dark text-white height-full`}
          style={{
            minHeight: windowHeight,
          }}>
          <h1>Welcome to Simple RSS</h1>
          <div className="test"></div>
          <h2>Username</h2>
          <input
            className="form-control"
            onChange={event => setUsername(event.target.value)}
            onKeyDown={e => e.key === 'Enter' && setPauseQueries(false)}
          />
          <Button
            className="col-sm-6 my-4"
            onClick={() => setPauseQueries(false)}>
            {isFetching ? (
              <Spinner
                as="span"
                variant="light"
                size="sm"
                role="status"
                aria-hidden="true"
                animation="border"
              />
            ) : (
              'Submit'
            )}
          </Button>
          {errorMessage ? <p>{errorMessage}</p> : null}
          <Row xs={1} md={2} lg={3} xl={4} className="g-4 text-dark">
            {items?.map(item => {
              return (
                <Col key={item.url}>
                  <Card
                    className="p-3"
                    style={{borderWidth: '0.3rem', cursor: 'pointer'}}
                    border={`${item.isRead ? '' : 'info'}`}
                    onClick={() => onItemClick(item.feedId, item)}>
                    {item.image ? (
                      <Card.Img
                        variant="top"
                        src={item.image}
                        style={{
                          maxHeight: '10rem',
                          minHeight: '8rem',
                          objectFit: 'cover',
                        }}
                      />
                    ) : (
                      <div style={{minHeight: '8rem'}} />
                    )}
                    <Card.Text className="my-2">
                      {item.title?.slice(0, 200)}
                    </Card.Text>
                    <Card.Subtitle className="text-secondary small my-1">
                      {item.description?.slice(0, 200)}
                    </Card.Subtitle>
                    <Card.Footer>
                      <a href={item.url}>
                        <FaExternalLinkAlt />
                      </a>
                    </Card.Footer>
                  </Card>
                </Col>
              );
            })}
          </Row>
          {showFetchAll ? null : (
            <Button className="col-sm-2 my-5" onClick={() => setFetchAll(true)}>
              Fetch all items
            </Button>
          )}
          <div />
          {showMarkAllRead ? (
            <Button className="col-sm-2" onClick={markAllRead}>
              Mark all read
            </Button>
          ) : null}
        </div>
      </main>
    </div>
  );
};

export default Home;
