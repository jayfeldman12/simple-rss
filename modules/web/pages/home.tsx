import type {NextPage} from 'next';
import Head from 'next/head';
import {useCallback, useEffect, useMemo, useState} from 'react';
import {
  Feed,
  FeedItem,
  Maybe,
  MutationMarkReadArgs,
} from './api/graphql/models/types';
import {FeedQuery, MarkRead} from '../queries/feedQuery';
import Spinner from 'react-bootstrap/Spinner';
import Card from 'react-bootstrap/Card';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';
import {FaExternalLinkAlt} from 'react-icons/fa';
import {graphqlRequest} from '../graphqlRequest';
import {useQuery, useMutation, useQueryClient} from '@tanstack/react-query';

type FeedResponse = {
  feeds: Feed[];
};

type ItemWithFeedId = FeedItem & {feedId: string};

const NO_USER_FOUND = 'No user found';

const Home: NextPage = () => {
  const queryClient = useQueryClient();

  const [username, setUsername] = useState('');
  const [pauseQueries, setPauseQueries] = useState(true);
  const [fetchAll, setFetchAll] = useState(false);
  const {
    data: {feeds} = {},
    isFetching,
    error,
  } = useQuery<FeedResponse, Error>(
    ['getFeeds' + username],
    () => graphqlRequest(FeedQuery, {username, onlyUnread: !fetchAll}),
    {enabled: !pauseQueries},
  );
  const {data: _markReadResult, mutate: markRead} = useMutation(
    (variables: MutationMarkReadArgs) =>
      graphqlRequest(MarkRead, {...variables}),
  );
  const [windowHeight, setWindowHeight] = useState<number | string>('100rem');

  useEffect(() => {
    if (typeof window !== 'undefined') setWindowHeight(window.innerHeight);
  }, []);

  useEffect(() => {
    if (error?.message.includes(NO_USER_FOUND)) {
      setPauseQueries(true);
    }
  }, [error?.message]);

  const items = useMemo(() => {
    if (feeds) {
      const results = feeds
        .flatMap<Partial<ItemWithFeedId> | undefined>(feed =>
          feed.feedItems?.map(item => ({...item, feedId: feed._id})),
        )
        .filter(x => x) as ItemWithFeedId[];
      const sorted = results.sort(
        (a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf(),
      );
      return sorted;
    }
    return null;
  }, [feeds]);

  const invalidateFeeds = useCallback(
    () => queryClient.invalidateQueries(['getFeeds' + username]),
    [queryClient, username],
  );

  const onItemClick = useCallback(
    (feedId: string, item: Maybe<FeedItem>) => {
      if (!item) return;
      if (!item.isRead) {
        markRead(
          {username, feeds: [{id: feedId, feedItemIds: [item.id]}]},
          {
            onSuccess: invalidateFeeds,
          },
        );
      }
      window.open(item.url);
    },
    [invalidateFeeds, markRead, username],
  );

  const markAllRead = useCallback(() => {
    const request: MutationMarkReadArgs = {
      username,
      feeds:
        feeds?.map(feed => ({
          id: feed._id,
          feedItemIds: feed.feedItems?.map(item => item.id) ?? [],
        })) ?? [],
    };
    markRead(request, {onSuccess: invalidateFeeds});
  }, [feeds, invalidateFeeds, markRead, username]);

  const unreadCount = useMemo(
    () =>
      items?.reduce((acc, nextItem) => (nextItem.isRead ? acc : acc + 1), 0),
    [items],
  );

  const haveUnreads = useMemo(() => {
    return (!fetchAll && items?.length) || items?.find(item => !item.isRead);
  }, [fetchAll, items]);

  return (
    <div>
      <Head>
        <title>{`${unreadCount ? `(${unreadCount}) ` : ''}Simple Rss`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div
          className={`container-fluid text-center py-5 px-5 bg-dark text-white height-full`}
          style={{
            minHeight: windowHeight,
          }}>
          <h1>Welcome to Simple RSS</h1>
          <div className="test"></div>
          <h2>Username</h2>
          <input
            className="form-control"
            onChange={event => setUsername(event.target.value)}
            onKeyDown={e => e.key === 'Enter' && setPauseQueries(false)}
          />
          <Button
            className="col-sm-6 my-4"
            onClick={() => setPauseQueries(false)}>
            {isFetching ? (
              <Spinner
                as="span"
                variant="light"
                size="sm"
                role="status"
                aria-hidden="true"
                animation="border"
              />
            ) : (
              'Submit'
            )}
          </Button>
          {!isFetching && error?.message.includes(NO_USER_FOUND) ? (
            <p>Invalid username</p>
          ) : null}
          <Row xs={1} md={2} lg={3} xl={4} className="g-4 text-dark">
            {items?.map(item => {
              return (
                <Col key={item.url}>
                  <Card
                    className="p-3"
                    style={{borderWidth: '0.3rem', cursor: 'pointer'}}
                    border={`${item.isRead ? '' : 'info'}`}
                    onClick={() => onItemClick(item.feedId, item)}>
                    {item.image ? (
                      <Card.Img
                        variant="top"
                        src={item.image}
                        style={{
                          maxHeight: '10rem',
                          minHeight: '8rem',
                          objectFit: 'cover',
                        }}
                      />
                    ) : (
                      <div style={{minHeight: '8rem'}} />
                    )}
                    <Card.Text className="my-2">
                      {item.title?.slice(0, 200)}
                    </Card.Text>
                    <Card.Subtitle className="text-secondary small my-1">
                      {item.description?.slice(0, 200)}
                    </Card.Subtitle>
                    <Card.Footer>
                      <a href={item.url}>
                        <FaExternalLinkAlt />
                      </a>
                    </Card.Footer>
                  </Card>
                </Col>
              );
            })}
          </Row>
          {!feeds || fetchAll ? null : (
            <Button className="col-sm-2 my-5" onClick={() => setFetchAll(true)}>
              Fetch all items
            </Button>
          )}
          <div />
          {haveUnreads ? (
            <Button className="col-sm-2" onClick={() => markAllRead()}>
              Mark all read
            </Button>
          ) : null}
        </div>
      </main>
    </div>
  );
};

export default Home;
