import type {NextPage} from 'next';
import Head from 'next/head';
import {useMemo, useState} from 'react';
import {useMutation, useQuery} from 'urql';
import {Feed, FeedItem, Maybe} from '../graphql/models/types';
import {FeedQuery, MarkRead} from '../queries/feedQuery';
import Spinner from 'react-bootstrap/Spinner';
import Card from 'react-bootstrap/Card';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';
import '../styles/Home.module.css';
import {FaExternalLinkAlt} from 'react-icons/fa';

type FeedResponse = {
  feeds: Feed[];
};

type ItemWithFeedId = FeedItem & {feedId: string};

const Home: NextPage = () => {
  const [username, setUsername] = useState('');
  const [pauseQueries, setPauseQueries] = useState(true);
  const [fetchAll, setFetchAll] = useState(false);
  const [{data: feedResults, fetching, error}, refetch] =
    useQuery<FeedResponse>({
      query: FeedQuery,
      variables: {username, onlyUnread: !fetchAll},
      pause: pauseQueries,
    });
  const [_markReadResult, markRead] = useMutation(MarkRead);

  const items = useMemo(() => {
    if (feedResults?.feeds) {
      const results = feedResults.feeds
        .flatMap<Partial<ItemWithFeedId> | undefined>(feed =>
          feed.feedItems?.map(item => ({...item, feedId: feed._id})),
        )
        .filter(x => x) as ItemWithFeedId[];
      const sorted = results.sort(
        (a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf(),
      );
      return sorted;
    }
    return null;
  }, [feedResults]);

  const onItemClick = (feedId: string, item: Maybe<FeedItem>) => {
    if (!item) return;
    console.log('item', item);
    markRead({username, feedId, feedItemId: item.id}).then(refetch);
    window.open(item.url);
  };

  return (
    <div>
      <Head>
        <title>Simple RSS</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="container-fluid text-center py-5 px-5 bg-dark text-white height-full">
          <h1>Welcome to Simple RSS</h1>
          <h2>Username</h2>
          <input
            className="form-control"
            onChange={event => setUsername(event.target.value)}
            onKeyDown={e => e.key === 'Enter' && setPauseQueries(false)}
          />
          <Button
            className="col-sm-6 my-4"
            style={{marginTop: 20}}
            onClick={() => setPauseQueries(false)}>
            {fetching ? (
              <Spinner
                as="span"
                variant="light"
                size="sm"
                role="status"
                aria-hidden="true"
                animation="border"
              />
            ) : (
              'Submit'
            )}
          </Button>
          {!fetching && error?.message?.includes('No user found') ? (
            <p>Invalid username</p>
          ) : null}
          <Row xs={1} md={2} lg={3} xl={4} className="g-4 text-dark">
            {items?.map(item => {
              return (
                <Col key={item.url}>
                  <Card
                    className="p-3"
                    border={`${item.isRead ? '' : 'info'}`}
                    style={{borderWidth: '0.3rem', cursor: 'pointer'}}
                    onClick={() => onItemClick(item.feedId, item)}>
                    {item.feedItemImage?.imgSrc ? (
                      <Card.Img
                        variant="top"
                        src={item.feedItemImage.imgSrc}
                        style={{maxHeight: '10rem', objectFit: 'cover'}}
                      />
                    ) : null}
                    <Card.Text className="my-2">
                      {item.title?.slice(0, 200)}
                    </Card.Text>
                    <Card.Subtitle className="text-secondary small my-1">
                      {item.description?.slice(0, 200)}
                    </Card.Subtitle>
                    <Card.Footer>
                      <a href={item.url}>
                        <FaExternalLinkAlt />
                      </a>
                    </Card.Footer>
                  </Card>
                </Col>
              );
            })}
          </Row>
          {!feedResults?.feeds || fetchAll ? null : (
            <Button className="my-5" onClick={() => setFetchAll(true)}>
              Fetch all items
            </Button>
          )}
        </div>
      </main>
    </div>
  );
};

export default Home;
